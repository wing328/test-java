/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.34
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GenericMultipleUsersLookupResponse;
import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject2;
import org.openapitools.client.model.ListLookupMultipleUsersLookupResponse;
import org.openapitools.client.model.MultiUserLookupResponse;
import org.openapitools.client.model.Problem;
import java.util.Set;
import org.openapitools.client.model.SingleUserLookupResponse;
import org.openapitools.client.model.UsersBlockingMutationResponse;
import org.openapitools.client.model.UsersFollowingCreateResponse;
import org.openapitools.client.model.UsersFollowingDeleteResponse;
import org.openapitools.client.model.UsersFollowingLookupResponse;
import org.openapitools.client.model.UsersMutingMutationResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * User lookup me
     *
     * This endpoint returns information about the requesting user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findMyUserTest() throws ApiException {
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                SingleUserLookupResponse response = api.findMyUser(expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * User lookup by ID
     *
     * This endpoint returns information about a user. Specify user by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByIdTest() throws ApiException {
        String id = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                SingleUserLookupResponse response = api.findUserById(id, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * User lookup by username
     *
     * This endpoint returns information about a user. Specify user by username.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByUsernameTest() throws ApiException {
        String username = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                SingleUserLookupResponse response = api.findUserByUsername(username, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * User lookup by IDs
     *
     * This endpoint returns information about users. Specify users by their ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUsersByIdTest() throws ApiException {
        List<String> ids = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                MultiUserLookupResponse response = api.findUsersById(ids, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * User lookup by usernames
     *
     * This endpoint returns information about users. Specify users by their username.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUsersByUsernameTest() throws ApiException {
        List<String> usernames = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                MultiUserLookupResponse response = api.findUsersByUsername(usernames, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that follow a List by the provided List ID
     *
     * Returns a list of users that follow a List by the provided List ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listGetFollowersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                ListLookupMultipleUsersLookupResponse response = api.listGetFollowers(id, maxResults, paginationToken, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that are members of a List by the provided List ID
     *
     * Returns a list of users that are members of a List by the provided List ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listGetMembersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Set<String> userFields = null;
                ListLookupMultipleUsersLookupResponse response = api.listGetMembers(id, maxResults, paginationToken, expansions, tweetFields, userFields);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that have liked the provided Tweet ID
     *
     * Returns a list of users that have liked the provided Tweet ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tweetsIdLikingUsersTest() throws ApiException {
        String id = null;
                GenericMultipleUsersLookupResponse response = api.tweetsIdLikingUsers(id);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that have retweeted the provided Tweet ID
     *
     * Returns a list of users that have retweeted the provided Tweet ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tweetsIdRetweetingUsersTest() throws ApiException {
        String id = null;
                GenericMultipleUsersLookupResponse response = api.tweetsIdRetweetingUsers(id);
        // TODO: test validations
    }
    
    /**
     * Block User by User ID
     *
     * Causes the user (in the path) to block the target user. The user (in the path) must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdBlockTest() throws ApiException {
        String id = null;
        InlineObject inlineObject = null;
                UsersBlockingMutationResponse response = api.usersIdBlock(id, inlineObject);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that are blocked by provided user ID
     *
     * Returns a list of users that are blocked by the provided user ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdBlockingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = api.usersIdBlocking(id, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Follow User
     *
     * Causes the user(in the path) to follow, or “request to follow” for protected users, the target user. The user(in the path) must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdFollowTest() throws ApiException {
        String id = null;
        InlineObject2 inlineObject2 = null;
                UsersFollowingCreateResponse response = api.usersIdFollow(id, inlineObject2);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that follow the provided user ID
     *
     * Returns a list of users that follow the provided user ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdFollowersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = api.usersIdFollowers(id, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Following by User ID
     *
     * Returns a list of users that are being followed by the provided user ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdFollowingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                UsersFollowingLookupResponse response = api.usersIdFollowing(id, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Mute User by User ID
     *
     * Causes the user (in the path) to mute the target user. The user (in the path) must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdMuteTest() throws ApiException {
        String id = null;
        InlineObject1 inlineObject1 = null;
                UsersMutingMutationResponse response = api.usersIdMute(id, inlineObject1);
        // TODO: test validations
    }
    
    /**
     * Returns user objects that are muted by the provided user ID
     *
     * Returns a list of users that are muted by the provided user ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdMutingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
                GenericMultipleUsersLookupResponse response = api.usersIdMuting(id, maxResults, paginationToken);
        // TODO: test validations
    }
    
    /**
     * Unblock User by User ID
     *
     * Causes the source user to unblock the target user. The source user must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdUnblockTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
                UsersBlockingMutationResponse response = api.usersIdUnblock(sourceUserId, targetUserId);
        // TODO: test validations
    }
    
    /**
     * Unfollow User
     *
     * Causes the source user to unfollow the target user. The source user must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdUnfollowTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
                UsersFollowingDeleteResponse response = api.usersIdUnfollow(sourceUserId, targetUserId);
        // TODO: test validations
    }
    
    /**
     * Unmute User by User ID
     *
     * Causes the source user to unmute the target user. The source user must match the user context authorizing the request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdUnmuteTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
                UsersMutingMutationResponse response = api.usersIdUnmute(sourceUserId, targetUserId);
        // TODO: test validations
    }
    
}
