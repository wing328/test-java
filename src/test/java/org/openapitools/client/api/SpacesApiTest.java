/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.34
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.MultiSpaceLookupResponse;
import org.openapitools.client.model.MultiTweetLookupResponse;
import org.openapitools.client.model.MultiUserLookupResponse;
import org.openapitools.client.model.Problem;
import java.util.Set;
import org.openapitools.client.model.SingleSpaceLookupResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SpacesApi
 */
@Ignore
public class SpacesApiTest {

    private final SpacesApi api = new SpacesApi();

    
    /**
     * Space lookup by Space ID
     *
     * Returns a variety of information about the Space specified by the requested ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSpaceByIdTest() throws ApiException {
        String id = null;
        Set<String> spaceFields = null;
        Set<String> expansions = null;
                SingleSpaceLookupResponse response = api.findSpaceById(id, spaceFields, expansions);
        // TODO: test validations
    }
    
    /**
     * Space lookup by their creators
     *
     * Returns a variety of information about the Spaces created by the provided User IDs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSpacesByCreatorIdsTest() throws ApiException {
        List<String> userIds = null;
        Set<String> spaceFields = null;
        Set<String> expansions = null;
                MultiSpaceLookupResponse response = api.findSpacesByCreatorIds(userIds, spaceFields, expansions);
        // TODO: test validations
    }
    
    /**
     * Space lookup up Space IDs
     *
     * Returns a variety of information about the Spaces specified by the requested IDs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findSpacesByIdsTest() throws ApiException {
        List<String> ids = null;
        Set<String> spaceFields = null;
        Set<String> expansions = null;
                MultiSpaceLookupResponse response = api.findSpacesByIds(ids, spaceFields, expansions);
        // TODO: test validations
    }
    
    /**
     * Search for Spaces
     *
     * Returns Spaces that match the provided query.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchSpacesTest() throws ApiException {
        String query = null;
        String state = null;
        Integer maxResults = null;
        Set<String> spaceFields = null;
        Set<String> expansions = null;
                MultiSpaceLookupResponse response = api.searchSpaces(query, state, maxResults, spaceFields, expansions);
        // TODO: test validations
    }
    
    /**
     * Retrieve the list of users who purchased a ticket to the given space
     *
     * Retrieves the list of users who purchased a ticket to the given space
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spaceBuyersTest() throws ApiException {
        String id = null;
        Set<String> userFields = null;
                MultiUserLookupResponse response = api.spaceBuyers(id, userFields);
        // TODO: test validations
    }
    
    /**
     * Retrieve tweets from a Space
     *
     * Retrieves tweets shared in the specified space
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spaceTweetsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Set<String> tweetFields = null;
                MultiTweetLookupResponse response = api.spaceTweets(id, maxResults, tweetFields);
        // TODO: test validations
    }
    
}
