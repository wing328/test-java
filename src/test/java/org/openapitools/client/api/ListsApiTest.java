/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.34
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ListAddMemberRequest;
import org.openapitools.client.model.ListCreateRequest;
import org.openapitools.client.model.ListCreateResponse;
import org.openapitools.client.model.ListDeleteResponse;
import org.openapitools.client.model.ListFollowRequest;
import org.openapitools.client.model.ListFollowedResponse;
import org.openapitools.client.model.ListMemberResponse;
import org.openapitools.client.model.ListPinRequest;
import org.openapitools.client.model.ListPinnedResponse;
import org.openapitools.client.model.ListUpdateRequest;
import org.openapitools.client.model.ListUpdateResponse;
import org.openapitools.client.model.MultiListNoPaginationResponse;
import org.openapitools.client.model.MultiListResponse;
import org.openapitools.client.model.Problem;
import java.util.Set;
import org.openapitools.client.model.SingleListLookupResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ListsApi
 */
@Ignore
public class ListsApiTest {

    private final ListsApi api = new ListsApi();

    
    /**
     * Get a User&#39;s List Memberships
     *
     * Get a User&#39;s List Memberships.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserListMembershipsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> listFields = null;
        Set<String> expansions = null;
        Set<String> userFields = null;
                MultiListResponse response = api.getUserListMemberships(id, maxResults, paginationToken, listFields, expansions, userFields);
        // TODO: test validations
    }
    
    /**
     * Add a List member
     *
     * Causes a user to become a member of a List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAddMemberTest() throws ApiException {
        String id = null;
        ListAddMemberRequest listAddMemberRequest = null;
                ListMemberResponse response = api.listAddMember(id, listAddMemberRequest);
        // TODO: test validations
    }
    
    /**
     * Create List
     *
     * Creates a new List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIdCreateTest() throws ApiException {
        ListCreateRequest listCreateRequest = null;
                ListCreateResponse response = api.listIdCreate(listCreateRequest);
        // TODO: test validations
    }
    
    /**
     * Delete List
     *
     * Delete a List that you own.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIdDeleteTest() throws ApiException {
        String id = null;
                ListDeleteResponse response = api.listIdDelete(id);
        // TODO: test validations
    }
    
    /**
     * List lookup by List ID
     *
     * Returns a List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIdGetTest() throws ApiException {
        String id = null;
        Set<String> listFields = null;
        Set<String> expansions = null;
        Set<String> userFields = null;
                SingleListLookupResponse response = api.listIdGet(id, listFields, expansions, userFields);
        // TODO: test validations
    }
    
    /**
     * Update List
     *
     * Update a List that you own.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIdUpdateTest() throws ApiException {
        String id = null;
        ListUpdateRequest listUpdateRequest = null;
                ListUpdateResponse response = api.listIdUpdate(id, listUpdateRequest);
        // TODO: test validations
    }
    
    /**
     * Remove a List member
     *
     * Causes a user to be removed from the members of a List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRemoveMemberTest() throws ApiException {
        String id = null;
        String userId = null;
                ListMemberResponse response = api.listRemoveMember(id, userId);
        // TODO: test validations
    }
    
    /**
     * Follow a List
     *
     * Causes a user to follow a List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserFollowTest() throws ApiException {
        String id = null;
        ListFollowRequest listFollowRequest = null;
                ListFollowedResponse response = api.listUserFollow(id, listFollowRequest);
        // TODO: test validations
    }
    
    /**
     * Get a User&#39;s Owned Lists
     *
     * Get a User&#39;s Owned Lists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserOwnedListsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> listFields = null;
        Set<String> expansions = null;
        Set<String> userFields = null;
                MultiListResponse response = api.listUserOwnedLists(id, maxResults, paginationToken, listFields, expansions, userFields);
        // TODO: test validations
    }
    
    /**
     * Pin a List
     *
     * Causes a user to pin a List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserPinTest() throws ApiException {
        String id = null;
        ListPinRequest listPinRequest = null;
                ListPinnedResponse response = api.listUserPin(id, listPinRequest);
        // TODO: test validations
    }
    
    /**
     * Get a User&#39;s Pinned Lists
     *
     * Get a User&#39;s Pinned Lists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserPinnedListsTest() throws ApiException {
        String id = null;
        Set<String> listFields = null;
        Set<String> expansions = null;
        Set<String> userFields = null;
                MultiListNoPaginationResponse response = api.listUserPinnedLists(id, listFields, expansions, userFields);
        // TODO: test validations
    }
    
    /**
     * Unfollow a List
     *
     * Causes a user to unfollow a List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserUnfollowTest() throws ApiException {
        String id = null;
        String listId = null;
                ListFollowedResponse response = api.listUserUnfollow(id, listId);
        // TODO: test validations
    }
    
    /**
     * Unpin a List
     *
     * Causes a user to remove a pinned List.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserUnpinTest() throws ApiException {
        String id = null;
        String listId = null;
                ListPinnedResponse response = api.listUserUnpin(id, listId);
        // TODO: test validations
    }
    
    /**
     * Get User&#39;s Followed Lists
     *
     * Returns a user&#39;s followed Lists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userFollowedListsTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        Long paginationToken = null;
        Set<String> listFields = null;
        Set<String> expansions = null;
        Set<String> userFields = null;
                MultiListResponse response = api.userFollowedLists(id, maxResults, paginationToken, listFields, expansions, userFields);
        // TODO: test validations
    }
    
}
