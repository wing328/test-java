/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Problem;
import org.openapitools.client.ApiClient;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ProblemOrError
 */
public class ProblemOrErrorTest {
    private final ProblemOrError model = new ProblemOrError();

    /**
     * Model tests for Problem
     */
    @Test
    public void testProblemInvalidRequestProblem() throws IOException {
        ApiClient apiClient = new ApiClient();
        // error payload obtained from https://www.postman.com/twitter/workspace/twitter-s-public-workspace/example/9956214-5eb266c9-ae5e-422a-85db-05e8784d83c3
        String jsonString = "{\n" +
                "    \"errors\": [\n" +
                "        {\n" +
                "            \"parameters\": {\n" +
                "                \"ids\": [\n" +
                "                    \"783214,2244994945,6253282,495309159,172020392,95731075,2548985366,277761722,17874544,300392950,87532773,372575989,3260518932,121291606,158079127,3282859598,103770785,586198217,216531294,1526228120,222953824,1603818258,2548979088,2244983430,1347713256,376825877,6844292,738118115595165697,738118487122419712,218984871,2550997820,1159458169,2296297326,234489024,3873936134,2228891959,791978718,427475002,1194267639100723200,1168976680867762177,905409822,738115375477362688,88723966,1049385226424786944,284201599,1705676064,2861317614,3873965293,1244731491088809984,4172587277,717465714357972992,862314223,2551000568,2548977510,1159274324,783214,2244994945,6253282,495309159,172020392,95731075,2548985366,277761722,17874544,300392950,87532773,372575989,3260518932,121291606,158079127,3282859598,103770785,586198217,216531294,1526228120,222953824,1603818258,2548979088,2244983430,1347713256,376825877,6844292,738118115595165697,738118487122419712,218984871,2550997820,1159458169,2296297326,234489024,3873936134,2228891959,791978718,427475002,1194267639100723200,1168976680867762177,905409822,738115375477362688,88723966,1049385226424786944,284201599,1705676064,2861317614,3873965293,1244731491088809984,4172587277,717465714357972992,862314223,2551000568,2548977510,1159274324\"\n" +
                "                ]\n" +
                "            },\n" +
                "            \"message\": \"size [110] is not between 1 and 100\"\n" +
                "        }\n" +
                "    ],\n" +
                "    \"title\": \"Invalid Request\",\n" +
                "    \"detail\": \"One or more parameters to your request was invalid.\",\n" +
                "    \"type\": \"https://api.twitter.com/2/problems/invalid-request\"\n" +
                "}";

        //Problem a = apiClient.getJSON().getGson().fromJson(jsonString, Problem.class);
        JsonObject jsonObject = new JsonParser().parse(jsonString).getAsJsonObject();
        Problem.validateJsonObject(jsonObject);
    }

    /**
     * Model tests for ProblemOrError
     */
    @Test
    public void testProblemOrErrorInvalidRequestProblem() {
        ApiClient apiClient = new ApiClient();
        // error payload obtained from https://www.postman.com/twitter/workspace/twitter-s-public-workspace/example/9956214-5eb266c9-ae5e-422a-85db-05e8784d83c3
        String jsonString = "{\n" +
                "    \"errors\": [\n" +
                "        {\n" +
                "            \"parameters\": {\n" +
                "                \"ids\": [\n" +
                "                    \"783214,2244994945,6253282,495309159,172020392,95731075,2548985366,277761722,17874544,300392950,87532773,372575989,3260518932,121291606,158079127,3282859598,103770785,586198217,216531294,1526228120,222953824,1603818258,2548979088,2244983430,1347713256,376825877,6844292,738118115595165697,738118487122419712,218984871,2550997820,1159458169,2296297326,234489024,3873936134,2228891959,791978718,427475002,1194267639100723200,1168976680867762177,905409822,738115375477362688,88723966,1049385226424786944,284201599,1705676064,2861317614,3873965293,1244731491088809984,4172587277,717465714357972992,862314223,2551000568,2548977510,1159274324,783214,2244994945,6253282,495309159,172020392,95731075,2548985366,277761722,17874544,300392950,87532773,372575989,3260518932,121291606,158079127,3282859598,103770785,586198217,216531294,1526228120,222953824,1603818258,2548979088,2244983430,1347713256,376825877,6844292,738118115595165697,738118487122419712,218984871,2550997820,1159458169,2296297326,234489024,3873936134,2228891959,791978718,427475002,1194267639100723200,1168976680867762177,905409822,738115375477362688,88723966,1049385226424786944,284201599,1705676064,2861317614,3873965293,1244731491088809984,4172587277,717465714357972992,862314223,2551000568,2548977510,1159274324\"\n" +
                "                ]\n" +
                "            },\n" +
                "            \"message\": \"size [110] is not between 1 and 100\"\n" +
                "        }\n" +
                "    ],\n" +
                "    \"title\": \"Invalid Request\",\n" +
                "    \"detail\": \"One or more parameters to your request was invalid.\",\n" +
                "    \"type\": \"https://api.twitter.com/2/problems/invalid-request\"\n" +
                "}";

        ProblemOrError a = apiClient.getJSON().getGson().fromJson(jsonString, ProblemOrError.class);

        Assert.assertTrue(a.getActualInstance() instanceof Problem);
        Assert.assertTrue(a.getActualInstance() instanceof InvalidRequestProblem);

        InvalidRequestProblem i = (InvalidRequestProblem) a.getActualInstance();
        Assert.assertEquals(i.getType(), "https://api.twitter.com/2/problems/invalid-request");
        Assert.assertEquals(i.getTitle(), "Invalid Request");
        Assert.assertEquals(i.getDetail(), "One or more parameters to your request was invalid.");

        InvalidRequestProblemAllOfErrors e = i.getErrors().get(0);
        Assert.assertEquals(e.getMessage(), "size [110] is not between 1 and 100");
    }

    @Test
    public void testProblemOrErrorClientForbiddenProblem() {
        ApiClient apiClient = new ApiClient();
        // error payload obtained from https://www.postman.com/twitter/workspace/twitter-s-public-workspace/example/9956214-98b17185-867b-4529-aa22-b2d4dc1ad1fc
        String jsonString = "{\n" +
                "    \"client_id\": \"16340226\",\n" +
                "    \"required_enrollment\": \"Standard Basic\",\n" +
                "    \"registration_url\": \"https://developer.twitter.com/en/account\",\n" +
                "    \"title\": \"Client Forbidden\",\n" +
                "    \"detail\": \"This request must be made using an approved developer account that is enrolled in the requested endpoint. Learn more by visiting our documentation.\",\n" +
                "    \"reason\": \"client-not-enrolled\",\n" +
                "    \"type\": \"https://api.twitter.com/2/problems/client-forbidden\"\n" +
                "}";

        ProblemOrError a = apiClient.getJSON().getGson().fromJson(jsonString, ProblemOrError.class);

        Assert.assertTrue(a.getActualInstance() instanceof Problem);
        Assert.assertTrue(a.getActualInstance() instanceof ClientForbiddenProblem);

        ClientForbiddenProblem i = (ClientForbiddenProblem) a.getActualInstance();
        Assert.assertEquals(i.getType(), "https://api.twitter.com/2/problems/client-forbidden");
        Assert.assertEquals(i.getTitle(), "Client Forbidden");
        Assert.assertEquals(i.getDetail(), "This request must be made using an approved developer account that is enrolled in the requested endpoint. Learn more by visiting our documentation.");
        //Assert.assertEquals(i.getClientId(), "16340226");
        Assert.assertEquals(i.getRegistrationUrl().toString(), "https://developer.twitter.com/en/account");
        Assert.assertEquals(i.getReason(), ClientForbiddenProblem.ReasonEnum.CLIENT_NOT_ENROLLED);
        //Assert.assertEquals(i.getRequiredEnrollment(), "Standard Basic");
    }

    @Test
    public void testProblemOrErrorConnectionException() {
        ApiClient apiClient = new ApiClient();
        // error payload obtained from https://www.postman.com/twitter/workspace/twitter-s-public-workspace/example/9956214-b97001a1-3133-4f34-bb4a-5bd393367259
        String jsonString = "{\n" +
                "    \"title\": \"ConnectionException\",\n" +
                "    \"detail\": \"This stream is currently at the maximum allowed connection limit.\",\n" +
                "    \"connection_issue\": \"TooManyConnections\",\n" +
                "    \"type\": \"https://api.twitter.com/2/problems/streaming-connection\"\n" +
                "}";

        ProblemOrError a = apiClient.getJSON().getGson().fromJson(jsonString, ProblemOrError.class);

        Assert.assertTrue(a.getActualInstance() instanceof Problem);
        Assert.assertTrue(a.getActualInstance() instanceof ConnectionExceptionProblem);

        ConnectionExceptionProblem i = (ConnectionExceptionProblem) a.getActualInstance();
        Assert.assertEquals(i.getType(), "https://api.twitter.com/2/problems/streaming-connection");
        Assert.assertEquals(i.getTitle(), "ConnectionException");
        Assert.assertEquals(i.getDetail(), "This stream is currently at the maximum allowed connection limit.");
        Assert.assertEquals(i.getConnectionIssue(), ConnectionExceptionProblem.ConnectionIssueEnum.TOOMANYCONNECTIONS);
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'detail'
     */
    @Test
    public void detailTest() {
        // TODO: test detail
    }

    /**
     * Test the property 'code'
     */
    @Test
    public void codeTest() {
        // TODO: test code
    }

    /**
     * Test the property 'message'
     */
    @Test
    public void messageTest() {
        // TODO: test message
    }

}
